#!/usr/bin/env node
// packages/phantom-core/scripts/build-tokens.js

import * as fs from 'fs';
import * as path from 'path';
// execSync is no longer needed for tsc here
// import { execSync } from 'child_process';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// --- Define Project Paths ---
const rootDir = path.resolve(__dirname, '..');
const srcTokensDir = path.join(rootDir, 'src', 'tokens');
const distDir = path.join(rootDir, 'dist');
const distEsmTokensDir = path.join(distDir, 'esm', 'tokens');
const compiledEntryPointFilename = 'index.js';
const jsonTokensFilename = 'tokens.json';

const ensureDirExists = (dirPath) => {
  // Only ensure the top-level dist exists, as build-formats handles the rest
  if (dirPath === distDir && !fs.existsSync(dirPath)) {
     fs.mkdirSync(dirPath, { recursive: true });
  }
  // We assume build-formats.js created the necessary subdirectories
};

// --- Main Build Function ---
async function buildTokens() {
  console.log('üî® Processing design tokens (JSON generation)...');

  // Ensure top-level dist exists, assume build-formats created subdirs
  ensureDirExists(distDir);

  try {
    // 3. Dynamically Import the Compiled ESM Output File (created by build-formats.js)
    const compiledModulePath = path.join(distEsmTokensDir, compiledEntryPointFilename).replace(/\\/g, '/');
    const cacheBuster = `?t=${Date.now()}`; // Keep cache buster for dynamic import

    // Check if the file actually exists first (sanity check)
    if (!fs.existsSync(compiledModulePath)) {
        console.error(`‚ùå Critical error: Compiled token file not found at ${compiledModulePath}`);
        console.error('   Ensure the main build script (build-formats.js) ran successfully and created this file.');
        process.exit(1);
    }

    console.log(`üì• Dynamically importing pre-compiled ESM tokens from ${compiledModulePath}...`);

    let importedTokens = null;
    try {
      // Use file:// protocol for absolute paths with dynamic import
      importedTokens = await import(`file://${compiledModulePath}${cacheBuster}`);
      console.log('   ‚úÖ Imported pre-compiled module successfully.');
    } catch (importError) {
      console.error(`‚ùå Critical error: Failed to import pre-compiled module at ${compiledModulePath}`);
      console.error('   Reason:', importError);
      process.exit(1);
    }

    // 4. Extract Token Categories from Named Exports (No change needed here)
    const tokens = {
      colors: importedTokens.colors || {},
      typography: importedTokens.typography || {},
      spacing: importedTokens.spacing || {},
      shadows: importedTokens.shadows || {},
      breakpoints: importedTokens.breakpoints || {},
      // Add other expected keys if necessary
      animations: importedTokens.animations || {},
      borderRadius: importedTokens.borderRadius || {},
      containers: importedTokens.containers || {},
    };

    // Validate that we actually got some tokens (No change needed here)
    const foundTokenKeys = Object.entries(tokens)
      .filter(([, value]) => typeof value === 'object' && Object.keys(value).length > 0)
      .map(([key]) => key);

    if (foundTokenKeys.length === 0) {
      console.error('‚ùå Critical error: Imported module did not contain expected token exports (colors, typography, etc.).');
      console.error('   Check the named exports in src/tokens/index.ts and the compiled output generated by build-formats.js.');
      console.error('   Compiled module path:', compiledModulePath);
      console.error('   Imported module content (keys):', Object.keys(importedTokens || {}));
      process.exit(1);
    } else {
      console.log(`   Extracted token categories: ${foundTokenKeys.join(', ')}`);
    }

    // 5. Write JSON Tokens File (No change needed here)
    console.log(`üìù Writing JSON tokens (${jsonTokensFilename})...`);
    const jsonPath = path.join(distDir, jsonTokensFilename);
    fs.writeFileSync(jsonPath, JSON.stringify(tokens, null, 2));
    console.log(`   Created: ${path.relative(rootDir, jsonPath)}`);

    console.log('\n‚úÖ Design tokens (JSON) processed successfully!');

  } catch (error) {
    console.error('‚ùå Error processing design tokens (JSON generation):', error);
    // Removed stderr check as execSync is gone
    // if (error.stderr) { ... }
    process.exit(1);
  }
}

// --- Run the Build ---
buildTokens();
